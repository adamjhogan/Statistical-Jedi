require(fifer)

	#### clear just erases everything (good to start with)
clear()

	#### read a file into R
d = read.csv("research/Statistical Framework/flexplot/literature/Violated Heuristics/anxiety_depression_absolutism2.csv")
nrow(d)
d$Group = "Delete"
d$Group[grep("Depression",d$Filename)] = "Depression"
d$Group[grep("Recovery",d$Filename)] = "Recovery"
d$Group[grep("Anxiety",d$Filename)] = "Anxiety"
d$Group[grep("Suicide",d$Filename)] = "Suicide"
d$Group[grep("Student",d$Filename)] = "Control"
d = d[-which(d$Group=="Delete"),]
d$Group = factor(d$Group)
nrow(d)

keep.names = c("Absol", "Group")
d = make.null(keep.names, data=d, keep=T)	
head(d)
	#### univariate visualization
a = flexplot(Absol~Group, data=d, alpha=.1, spread="sterr", raw.data=F) + coord_cartesian(ylim=c(.5, 2.1))
b = flexplot(Absol~Group, data=d, sample = 200, spread="sterr")
require(cowplot)
plot_grid(a,b)




d$Filename[]
d$Filename = subsetString(as.character(d$Filename), "[0-9]", 1)
unique(d$Filename)
d$Filename[grep("Anx", d$Filename, ignore.case=T)]

d$Filename[grep("Anx", d$Filename, ignore.case=T)]



	#### make a list of variable names we want to keep

names(d)


d = make.null(keep.names, data=d, keep=T)	
d$Condition = factor(d$Condition)
	#### univariate visualization
flexplot(Absolutist~Condition, data=d, alpha=.1, spread="sterr") + coord_cartesian(ylim=c(0, 2.1))

	### enter the word you want to search for in the column names...
value = "dds"
names(d)[grep(value, names(d), ignore.case=T)]
names(d)

	#### create function to convert all 999 to NA...
f = function(x){
	if (is.numeric(x)){x[x==999]=NA;x}}
d = data.frame(apply(d, 2, f))

	#### view the first 6 lines of the dataset
head(d)


	#### look at names that contain "PANAS" then sum them up
names(d)[grep("tot", names(d), ignore.case=T)]
panas.neg = c("PANAS_2", "PANAS_4", "PANAS_6", "PANAS_7", "PANAS_8", "PANAS_11", "PANAS_13", "PANAS_15", "PANAS_18", "PANAS_20")
panas.pos = c("PANAS_1", "PANAS_3", "PANAS_5", "PANAS_9", "PANAS_10","PANAS_12", "PANAS_14", "PANAS_16", "PANAS_17", "PANAS_19")
d$panas.neg.tot = rowSums(d[,panas.neg])
d$panas.pos.tot = rowSums(d[,panas.pos])

	#### make a total score for "observer perspective"
eq_names = intersperse("EQ_", c(2,7,5))
baft = intersperse("BAFT_", c(4,12,13,14,3,6))
dds = intersperse("DDS_", c(10,1,5,6))
d$obs.persp = rowSums(d[, c(eq_names, baft, dds)])


d = make.null(keep.names, data=d, keep=T)	

	#### univariate visualization
flexplot(panas.neg.tot~1, data=d)
flexplot(IDAS_Dys~panas.neg.tot|obs.persp, data=d, bins=3, se=F, method="lm", ghost.line="red", ghost.reference=list(obs.persp=45))
